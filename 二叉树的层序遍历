给定一个二叉树，返回其节点值自底向上的层序遍历。 （即按从叶子节点所在层到根节点所在的层，逐层从左向右遍历）

例如：
给定二叉树 [3,9,20,null,null,15,7],

    3
   / \
  9  20
    /  \
   15   7
返回其自底向上的层序遍历为：

[
  [15,7],
  [9,20],
  [3]
]

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/binary-tree-level-order-traversal-ii
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。






class Solution:
    def levelOrderBottom(self, root: TreeNode) -> List[List[int]]:
        if not root:
            return []
        res = []  #存储最后结果
        Q = [root]  #存储节点的队列
        i = 1  #用来判断层数
        while Q:  
            next_Q = []  #存储下一层的节点
            for node in Q:  #循环访问队列中某一层的节点
                if len(res)<i:
                    res.append([node.val])
                else:
                    res[i-1].append(node.val)
                if node.left:
                    next_Q.append(node.left)
                if node.right:
                    next_Q.append(node.right)
            i += 1
            Q = next_Q
        res.reverse()  #翻转存储的顺序
        return res
